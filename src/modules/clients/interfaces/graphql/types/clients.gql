# types
type Clients {
    cliId: ID
    idStore: ID
    idUser: ID
    clState: Int
    clientNumber: String
    ClientAddress: String
    ccClient: String
    gender: Int
    clientLastName: String
    clientName: String
    createAt: DateTime
    updateAt: DateTime
}

# Inputs    
input IClients {
    cliId: ID #Solo para actualizar
    idStore: ID
    idUser: ID
    clState: Int
    gender: Int
    clientNumber: String
    ClientAddress: String
    ccClient: String
    clientLastName: String
    clientName: String
    createAt: DateTime
    updateAt: DateTime
}
"Respuesta de la petición del cliente"
type ResponseClient {
    success: Boolean
    message: String
    errors: [errors]
    data: Clients
}

"Respuesta de la petición de los clientes"
type ResponseClients {
    success: Boolean
    message: String
    errors: [errors]
    data: [Clients]
    pagination: Pagination 
}

# Queries
type Query {
    "Consulta todos los países"
    getOneClients(cliId: ID): Clients
    getAllClients(idStore: ID, cId: ID, dId: ID, ctId: ID, search: String, min: Int, fromDate: DateTime, toDate: DateTime, max: Int, page: Int): ResponseClients
}

# Mutations
type Mutation {
    "Registra un cliente"
    createClients(input: IClients): ResponseClient
    editOneClient(input: IClients): Response
    deleteClient(cliId: ID, clState: Int!): Response
}

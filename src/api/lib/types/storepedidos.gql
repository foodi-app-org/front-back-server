
# Stores
type StoreOrders {
  pdpId: ID
  id: ID
  idStore: ID
  pId: ID
  ppState: Int
  channel: Int
  change: Int
  pCodeRef: String
  pPDate: DateTime
  pSState: ID # 5 estados - confirmado - proceso - salida - cancelado
  pPStateP: Int
  payMethodPState: Int
  pPRecoger: Int
  totalProductsPrice: Float
  unidProducts: Int
  pDatCre: DateTime
  pDatMod: DateTime
  getUser: User
  ShoppingCard: ID
  productFoodsOne: ProductFood
  getStoreOrders: [StoreOrders]
  getStatusOrderType: OrderStatusType
  getAllShoppingCard: ShoppingCard
  salesExtProductFoodOptional: [saleExtProductFoodOptional]
  locationUser: String
  getOneStore: Store
}

type saleExtProductFoodOptional {
    pId: ID!
    opExPid: ID
    OptionalProName: String
    state: Int
    code: String
    required: Int
    numbersOptionalOnly: Int
    pDatCre: DateTime
    pDatMod: DateTime
    saleExtProductFoodsSubOptionalAll: [saleExtProductFoodSubOptional]
}

type saleExtProductFoodSubOptional {
    pId: ID
    opExPid: ID
    idStore: ID
    opSubExPid: ID #main
    OptionalSubProName: String
    exCodeOptionExtra: String #Relación con ExtProductFoodOptional
    exCode: String #Relación con ExtProductFoodOptional
    state: Int
    pDatCre: DateTime
    pDatMod: DateTime
}

input InputStoreOrders {
  pdpId: ID
  id: ID
  pId: ID
  idStore: ID
  ppState: Int
  pCodeRef: String
  pPDate: DateTime
  pSState: ID # 5 estados - confirmado - proceso - preparacion - salida - cancelado  
  pPStateP: Int
  payMethodPState: Int
  pPRecoger: Int
  unidProducts: Int
  pDatCre: DateTime
  pDatMod: DateTime
}

# ShoppingCard Input
input INPUT_SHOPPING_PRODUCTS {
  ShoppingCard: ID
  idStore: ID
}
# input sales store web
input SET_INPUT_SHOPPING_PRODUCTS_ITEMS {
  setInput: [INPUT_SHOPPING_PRODUCTS]
  change: Int
  pickUp: Int
  pCodeRef: String
  pPStateP: Int # 5 estados - confirmado - proceso - preparacion - salida - cancelado  
  payMethodPState: Int  
  pPRecoger: Int
  totalProductsPrice: Float
  locationUser: String
}
# input sales store
input InputSaleStore {
  change: Int
  pickUp: Int
  pCodeRef: String
  pPStateP: Int # 5 estados - confirmado - proceso - preparacion - salida - cancelado
  payMethodPState: Int
  pPRecoger: Int
  totalProductsPrice: Float
}

type TypeInputSalesChannel {
    restaurant: Float,
    delivery: Float,
    TOTAL: Float,
}

type StoreOrdersFromPSState {
  ACCEPT: [StoreOrders]
  PROCESSING: [StoreOrders]
  READY: [StoreOrders]
  CONCLUDES: [StoreOrders]
  REJECTED: [StoreOrders]
}

type StoreOrdersGroupByStatus {
  statusKey: String
  priority: Float
  state: Int
  getStatusOrderType: OrderStatusType
  items: [StoreOrders]
}

type ResponseChangePPStateOrder {
    success: Boolean
    message: String
    errors: [errors]
    data: StoreOrders
}

type Query {
"""Response for find one Store"""
  getAllIncomingToDayOrders(statusOrder: Int, idStore: ID): [StoreOrders]
  getStoreOrderById(pCodeRef: String, StoreName: String, idStore: ID): StoreOrders
  getStoreOrders(StoreName: String, idStore: ID): [StoreOrders]
  getStoreOrdersFinal(idStore: ID, cId: ID dId: ID ctId: ID search: String min: Int fromDate: DateTime toDate: DateTime max: Int, statusOrder: Int): [StoreOrders]
  getAllOrdersFromStore(idStore: ID, cId: ID dId: ID ctId: ID search: String min: Int fromDate: DateTime toDate: DateTime max: Int, statusOrder: Int, inCludeRange: Boolean): [StoreOrdersGroupByStatus]
  getAllSalesStore(idStore: ID, pId: ID cId: ID dId: ID ctId: ID search: String min: Int fromDate: String toDate: String max: Int channel: Int): [StoreOrders]
  getAllSalesStoreTotal(idStore: ID, pId: ID cId: ID dId: ID ctId: ID search: String min: Int fromDate: String toDate: String max: Int, channel: Int): TypeInputSalesChannel
  getAllSalesStoreStatistic(idStore: ID, pId: ID cId: ID dId: ID ctId: ID search: String min: Int fromDate: DateTime toDate: DateTime max: Int): [StoreOrders]
  getAllPedidoUserFinal(id: ID): [StoreOrders]
  getOneSalesStore(pCodeRef: String): StoreOrders
}

type Mutation {
  """"Store data Order"""
  createOnePedidoStore(input: InputStoreOrders): AuthPayload
  # create a sale in store web
  createMultipleOrderStore(input: SET_INPUT_SHOPPING_PRODUCTS_ITEMS): Response
  # create a sale in store
  createSalesStore(input: InputSaleStore): Response
  createShoppingCardStoreToUser(input: InputSaleStore): Response

  changePPStateOrder(idStatus: ID, pCodeRef: String, pDatMod: String): ResponseChangePPStateOrder
}

type Subscription {
  newStoreOrders: StoreOrders
}
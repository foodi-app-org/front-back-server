# Employee
type Employee {
    eId: ID
    aId: ID!
    tpId: ID!
    eEnterprise: String
    eSalary: String
    eCharge: String
    typeContract: String
    termContract: String
    eDatAdm: DateTime
    eDatRet: DateTime
    eArl: String
    eBoxComp: String
    eState: Int
    eDatCre: DateTime
    eDatMod: DateTime
    area: Area
    thirdParties: ThirdParties
}
type EmployeeStore {
    eId: ID
    idStore: ID
    id: ID
    idRole: ID
    idEmployee: ID
    eSalary: Float
    typeContract: String
    eEmail: String
    termContract: String
    eDatAdm: DateTime
    eState: Int
    status: String
    tpEmail: String
    user: User
    roles: Roles

}

# Input
input IEmployee {
    eId: ID
    aId: ID
    tpId: ID
    eEnterprise: String
    eSalary: Float
    eCharge: String
    typeContract: String
    termContract: String
    eDatAdm: DateTime
    eDatRet: DateTime
    eArl: String
    eBoxComp: String
    eState: Int
    status: String
    tpNumDoc: String
    tpName: String
    tpLasNam: String
    tpPhone: String
    tpEmail: String
    tpState: Int
}
input IEmployeeStore {
    eId: ID
    idStore: ID
    id: ID
    idEmployee: ID
    eSalary: Float
    typeContract: String
    eEmail: String
    tpEmail: String
    termContract: String
    eDatAdm: DateTime
    nameEmployee: String
    eState: Int
    idRole: ID!
}

type ResponseEmployee {
    success: Boolean
    message: String
    errors: [errors]
    data: [EmployeeStore]
    pagination: Pagination 
}

type ResponseLoginEmployee {
    token: String
    idStore: String
    success: Boolean
    message: String
}

type UpdateEmployeeResponse {
   success: Boolean
    message: String
    errors: [errors]
    data: [EmployeeStore]
}

# Query
type Query {
    "Devuelve todos los empleados"
    employees(umId: ID, cId: ID, aId: ID, idStore: ID, max: Int, min: Int): ResponseEmployee
    "Devuelve un empleado"
    employee(eId: ID, tpId: ID): Employee
    employeeStore(eId: ID, tpId: ID, aId: ID, idStore: ID, max: Int, min: Int): EmployeeStore
}

# Mutation
type Mutation {
    "Esto crea un nuevo empleado"
    createOneEmployeeStoreAndUser(input: IEmployeeStore): Response
    deleteEmployeeStore(eId: ID, tpId: ID, idStore: ID): Response
    loginEmployeeInStore(eEmail: String, eId: ID, idStore: ID, tenantId: String, idUser: ID): ResponseLoginEmployee
    removeEmployee(employeeIds: [ID!]!): UpdateEmployeeResponse
}
